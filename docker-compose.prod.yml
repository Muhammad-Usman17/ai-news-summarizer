version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: news_postgres_prod
    environment:
      POSTGRES_DB: newsdb
      POSTGRES_USER: newsuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-newspassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - news-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U newsuser -d newsdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: news_redis_prod
    volumes:
      - redis_data:/data
    networks:
      - news-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:1.21.5
    container_name: news_temporal_prod
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=newsuser
      - POSTGRES_PWD=${POSTGRES_PASSWORD:-newspassword}
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    networks:
      - news-network
    volumes:
      - ./docker/temporal:/etc/temporal/config/dynamicconfig

  # Temporal Web UI
  temporal-web:
    image: temporalio/web:2.18.2
    container_name: news_temporal_web_prod
    depends_on:
      - temporal
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
    ports:
      - "8080:8080"
    networks:
      - news-network

# LLM service replaced with Groq API (cloud-based, no local container needed)

  # News API Service
  news-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: news_api_prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      temporal:
        condition: service_started
    environment:
      - ENVIRONMENT=production
      - DEBUG=False
      - DATABASE_URL=postgresql://newsuser:${POSTGRES_PASSWORD:-newspassword}@postgres:5432/newsdb
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - TEMPORAL_HOST=temporal:7233
      - GROQ_API_KEY=${GROQ_API_KEY}
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    ports:
      - "8000:8000"
    networks:
      - news-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  news-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: news_worker_prod
    depends_on:
      news-api:
        condition: service_healthy
    environment:
      - ENVIRONMENT=production
      - DEBUG=False
      - DATABASE_URL=postgresql://newsuser:${POSTGRES_PASSWORD:-newspassword}@postgres:5432/newsdb
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - TEMPORAL_HOST=temporal:7233
      - GROQ_API_KEY=${GROQ_API_KEY}
    command: celery -A app.celery_app worker --loglevel=info
    networks:
      - news-network

  # Temporal Worker
  news-temporal-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: news_temporal_worker_prod
    depends_on:
      news-api:
        condition: service_healthy
    environment:
      - ENVIRONMENT=production
      - DEBUG=False
      - DATABASE_URL=postgresql://newsuser:${POSTGRES_PASSWORD:-newspassword}@postgres:5432/newsdb
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - TEMPORAL_HOST=temporal:7233
      - GROQ_API_KEY=${GROQ_API_KEY}
    command: python -m app.workflows.temporal_worker
    networks:
      - news-network

  # Jaeger for Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: news_jaeger_prod
    ports:
      - "16686:16686"  # UI
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - news-network

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: news_prometheus_prod
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - news-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: news_grafana_prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana:/etc/grafana/provisioning
    networks:
      - news-network

  # Loki for Logging
  loki:
    image: grafana/loki:2.9.2
    container_name: news_loki_prod
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - news-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: news_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - news-api
    networks:
      - news-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  news-network:
    driver: bridge